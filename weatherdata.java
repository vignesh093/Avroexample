/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.iv.avro;  



@SuppressWarnings("all")
/** contains weather info */
@org.apache.avro.specific.AvroGenerated
public class weatherdata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"weatherdata\",\"namespace\":\"com.iv.avro\",\"doc\":\"contains weather info\",\"fields\":[{\"name\":\"place\",\"type\":\"string\"},{\"name\":\"year_of_wth\",\"type\":\"int\"},{\"name\":\"temp\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence place;
  @Deprecated public int year_of_wth;
  @Deprecated public float temp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public weatherdata() {}

  /**
   * All-args constructor.
   */
  public weatherdata(java.lang.CharSequence place, java.lang.Integer year_of_wth, java.lang.Float temp) {
    this.place = place;
    this.year_of_wth = year_of_wth;
    this.temp = temp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return place;
    case 1: return year_of_wth;
    case 2: return temp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: place = (java.lang.CharSequence)value$; break;
    case 1: year_of_wth = (java.lang.Integer)value$; break;
    case 2: temp = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'place' field.
   */
  public java.lang.CharSequence getPlace() {
    return place;
  }

  /**
   * Sets the value of the 'place' field.
   * @param value the value to set.
   */
  public void setPlace(java.lang.CharSequence value) {
    this.place = value;
  }

  /**
   * Gets the value of the 'year_of_wth' field.
   */
  public java.lang.Integer getYearOfWth() {
    return year_of_wth;
  }

  /**
   * Sets the value of the 'year_of_wth' field.
   * @param value the value to set.
   */
  public void setYearOfWth(java.lang.Integer value) {
    this.year_of_wth = value;
  }

  /**
   * Gets the value of the 'temp' field.
   */
  public java.lang.Float getTemp() {
    return temp;
  }

  /**
   * Sets the value of the 'temp' field.
   * @param value the value to set.
   */
  public void setTemp(java.lang.Float value) {
    this.temp = value;
  }

  /** Creates a new weatherdata RecordBuilder */
  public static com.iv.avro.weatherdata.Builder newBuilder() {
    return new com.iv.avro.weatherdata.Builder();
  }
  
  /** Creates a new weatherdata RecordBuilder by copying an existing Builder */
  public static com.iv.avro.weatherdata.Builder newBuilder(com.iv.avro.weatherdata.Builder other) {
    return new com.iv.avro.weatherdata.Builder(other);
  }
  
  /** Creates a new weatherdata RecordBuilder by copying an existing weatherdata instance */
  public static com.iv.avro.weatherdata.Builder newBuilder(com.iv.avro.weatherdata other) {
    return new com.iv.avro.weatherdata.Builder(other);
  }
  
  /**
   * RecordBuilder for weatherdata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<weatherdata>
    implements org.apache.avro.data.RecordBuilder<weatherdata> {

    private java.lang.CharSequence place;
    private int year_of_wth;
    private float temp;

    /** Creates a new Builder */
    private Builder() {
      super(com.iv.avro.weatherdata.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.iv.avro.weatherdata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.place)) {
        this.place = data().deepCopy(fields()[0].schema(), other.place);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year_of_wth)) {
        this.year_of_wth = data().deepCopy(fields()[1].schema(), other.year_of_wth);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temp)) {
        this.temp = data().deepCopy(fields()[2].schema(), other.temp);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing weatherdata instance */
    private Builder(com.iv.avro.weatherdata other) {
            super(com.iv.avro.weatherdata.SCHEMA$);
      if (isValidValue(fields()[0], other.place)) {
        this.place = data().deepCopy(fields()[0].schema(), other.place);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year_of_wth)) {
        this.year_of_wth = data().deepCopy(fields()[1].schema(), other.year_of_wth);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temp)) {
        this.temp = data().deepCopy(fields()[2].schema(), other.temp);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'place' field */
    public java.lang.CharSequence getPlace() {
      return place;
    }
    
    /** Sets the value of the 'place' field */
    public com.iv.avro.weatherdata.Builder setPlace(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.place = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'place' field has been set */
    public boolean hasPlace() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'place' field */
    public com.iv.avro.weatherdata.Builder clearPlace() {
      place = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'year_of_wth' field */
    public java.lang.Integer getYearOfWth() {
      return year_of_wth;
    }
    
    /** Sets the value of the 'year_of_wth' field */
    public com.iv.avro.weatherdata.Builder setYearOfWth(int value) {
      validate(fields()[1], value);
      this.year_of_wth = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'year_of_wth' field has been set */
    public boolean hasYearOfWth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'year_of_wth' field */
    public com.iv.avro.weatherdata.Builder clearYearOfWth() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'temp' field */
    public java.lang.Float getTemp() {
      return temp;
    }
    
    /** Sets the value of the 'temp' field */
    public com.iv.avro.weatherdata.Builder setTemp(float value) {
      validate(fields()[2], value);
      this.temp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'temp' field has been set */
    public boolean hasTemp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'temp' field */
    public com.iv.avro.weatherdata.Builder clearTemp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public weatherdata build() {
      try {
        weatherdata record = new weatherdata();
        record.place = fieldSetFlags()[0] ? this.place : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.year_of_wth = fieldSetFlags()[1] ? this.year_of_wth : (java.lang.Integer) defaultValue(fields()[1]);
        record.temp = fieldSetFlags()[2] ? this.temp : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
